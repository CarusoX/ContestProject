https://jcw87.github.io/c2-sans-fight/
#include <stdio.h>
#include <stdlib.h>

int x;
int y;
int firstx;
int firsty;

int turn = 1;
int switches;

char selection;
int playerSelection;

char rematchVar;
int compare;
int yes[2] = { 89, 121 };
int no[2] = { 78, 110 };

char board[3][3] = { { '0', '1', '2' },{ '3', '4', '5' },{ '6', '7', '8' } };
char boardLab[3][3] = { { '0', '1', '2' },{ '3', '4', '5' },{ '6', '7', '8' } };

int print();
int copyBoard();

int selectPlayer();
int humanMove();
int cpuMove();

bool win(char board[3][3]);
bool aboutTo();

bool edge(int x, int y);
bool corner(int x, int y);

int pickCorner();
int pickEdge();
int pickSquare();

bool rematch();

bool xOR(int x, int y, int n);

int main() {
	playerSelection = selectPlayer();
	if (playerSelection == 1) {
		do {
			print();
			humanMove();
			turn = turn + 1;
			if (win(board) || turn == 10) {
				break;
			}
			print();
			cpuMove();
			turn = turn + 1;
		} while (win(board) == false && turn < 10);
	}
	else {
		do {
			cpuMove();
			turn = turn + 1;
			if (win(board) || turn == 10) {
				break;
			}
			print();
			humanMove();
			turn = turn + 1;
			print();
		} while (win(board) == false && turn < 10);
	}
	print();
	if (turn == 10) {
		printf("Draw game\n");
	}
	else if (turn % 2 == 0) {
		printf("Player 1 won!!\n");
	}
	else if (turn % 2 == 1) {
		printf("Player 2 won!!\n");
	}

	if (rematch()) {
		main();
	}
	else {

	}
}

int print() {

	printf("\n");
	printf("\t  0\t  1\t  2\n");

	for (int i = 0; i < 3; i++)
	{
		printf("%d", i);

		for (int j = 0; j < 3; j++)
		{
			if (board[i][j] == 'X' || board[i][j] == 'O')
			{
				if (j == 2) {
					printf("\t[ %c ]\n", board[i][j]);
				}
				else {
					printf("\t[ %c ]", board[i][j]);
				}
			}
			else {
				if (j == 2) {
					printf("\t[ - ]\n");
				}
				else {
					printf("\t[ - ]");
				}
			}
		}
	}
	printf("\n");
	return 0;
}
int copyBoard() {
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			board[i][j] = boardLab[i][j];
		}

	}
	return 0;
}

int selectPlayer() {
	printf("Select either O or X (X starts first)\n");

	scanf("%s", &selection);
	if (selection == 'X' || selection == 'x')
	{
		return 1;
	}
	if (selection == 'O' || selection == 'o')
	{
		return 2;
	}
	else {
		printf("Please try again\n");
		selectPlayer();
	}
}
int humanMove() {
	printf("Player %d move\n", playerSelection);
	printf("Enter the number of the row you wanna move: ");
	scanf("%d", &x);
	printf("Enter the number of the column you wanna move: ");
	scanf("%d", &y);

	if (board[x][y] == 'O' || board[x][y] == 'X' || x < 0 || x > 2 || y < 0 || y > 2)
	{
		printf("Invalid move, try again\n");
		humanMove();
	}
	else {
		if (playerSelection == 1)
		{
			board[x][y] = 'X';
			boardLab[x][y] = 'X';
		}
		else {
			board[x][y] = 'O';
			boardLab[x][y] = 'O';
		}
	}
	return 0;
}
int cpuMove() {
	switch (turn)
	{
	case 1:
		board[2][0] = 'X';
		boardLab[2][0] = 'X';
		break;

	case 2:
		if (edge(x, y)) {
			switches = 1;
			firstx = x;
			firsty = y;
			board[1][1] = 'O';
			boardLab[1][1] = 'O';
		}
		else if (corner(x, y)) {
			switches = 2;
			board[1][1] = 'O';
			boardLab[1][1] = 'O';
		}
		else {
			switches = 3;
			board[2][0] = 'O';
			boardLab[2][0] = 'O';
		}
		break;

	case 3:
		firstx = x;
		firsty = y;

		if (board[1][1] == 'O') {
			board[0][2] = 'X';
			boardLab[0][2] = 'X';
		}
		else if (board[2][1] == 'O' || board[2][2] == 'O' || board[1][2] == 'O') {
			board[0][0] = 'X';
			boardLab[0][0] = 'X';
		}
		else {
			board[2][2] = 'X';
			boardLab[2][2] = 'X';
		}
		break;

	case 4:
		if (aboutTo()) {
			copyBoard();
		}
		else if (switches == 1) {
			if ((x == firstx || y == firsty) && edge(x, y)) {
				pickEdge();
			}
			else {
				pickCorner();
			}
		}
		else if (switches == 2) {

			if (corner(x, y)) {
				board[2][1] = 'O';
				boardLab[2][1] = 'O';
			}
			else {
				pickCorner();
			}
		}
		else {
			board[0][0] = 'O';
			boardLab[0][0] = 'O';
		}

		break;

	case 5:
		if (aboutTo()) {
			copyBoard();
		}
		else if (edge(firstx, firsty) == true) {
			board[1][1] = 'X';
			boardLab[1][1] = 'X';
		}
		else {
			pickSquare();
		}
		break;

	default:
		if (aboutTo()) {
			copyBoard();
		}
		else {
			pickSquare();
		}
		break;
	}
	return 0;
}

bool win(char board[3][3]) {
	for (int line = 0; line < 3; line++)
	{
		if (board[line][0] == board[line][1] && board[line][0] == board[line][2])
		{
			return true;
		}
		if (board[0][line] == board[1][line] && board[0][line] == board[2][line]) {
			return true;
		}
	}
	if (board[0][0] == board[1][1] && board[1][1] == board[2][2])
	{
		return true;
	}
	if (board[2][0] == board[1][1] && board[1][1] == board[0][2]) {
		return true;
	}
	else {
		return false;
	}
}
bool aboutTo() {
	if (turn % 2 == 0) {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++)
			{
				if (board[i][j] != 'X' && board[i][j] != 'O') {
					boardLab[i][j] = 'O';
					if (win(boardLab)) {
						return true;
					}
					boardLab[i][j] = board[i][j];
				}
			}
		}
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++)
			{
				if (board[i][j] != 'X' && board[i][j] != 'O') {
					boardLab[i][j] = 'X';
					if (win(boardLab)) {
						boardLab[i][j] = 'O';
						return true;
					}
					boardLab[i][j] = board[i][j];
				}
			}
		}
	}
	else {
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++)
			{
				if (board[i][j] != 'X' && board[i][j] != 'O') {
					boardLab[i][j] = 'X';
					if (win(boardLab)) {
						return true;
					}
					boardLab[i][j] = board[i][j];

				}
			}
		}
		for (int i = 0; i < 3; i++) {
			for (int j = 0; j < 3; j++)
			{
				if (board[i][j] != 'X' && board[i][j] != 'O') {
					boardLab[i][j] = 'O';
					if (win(boardLab)) {
						boardLab[i][j] = 'X';
						return true;
					}
					boardLab[i][j] = board[i][j];
				}
			}
		}
	}
	return false;
}

bool edge(int x, int y) {
	if (xOR(x, y, 1)) {
		return true;
	}
	else {
		return false;
	}
}
bool corner(int x, int y) {
	if (x != 1 && y != 1) {
		return true;
	}
	return false;
}

int pickEdge() {
	do {
		x = rand() % 3;
		y = rand() % 3;
	} while (corner(x, y) || board[x][y] == 'X' || board[x][y] == 'O');
	if (turn % 2 == 0) {
		board[x][y] = 'O';
		boardLab[x][y] = 'O';
	}
	else {
		board[x][y] = 'X';
		boardLab[x][y] = 'X';
	}
	return 0;
}
int pickCorner() {
	do {
		x = rand() % 3;
		y = rand() % 3;
	} while (edge(x, y) || board[x][y] == 'X' || board[x][y] == 'O');
	if (turn % 2 == 0) {
		board[x][y] = 'O';
		boardLab[x][y] = 'O';
	}
	else {
		board[x][y] = 'X';
		boardLab[x][y] = 'X';
	}
	return 0;
}
int pickSquare() {
	do {
		x = rand() % 3;
		y = rand() % 3;
	} while ((board[x][y] == 'X' || board[x][y] == 'O'));
	if (turn % 2 == 0) {
		board[x][y] = 'O';
		boardLab[x][y] = 'O';
	}
	else {
		board[x][y] = 'X';
		boardLab[x][y] = 'X';
	}
	return 0;
}

bool rematch() {

	printf("If you want a rematch, type Y, if not, type N\n");

	scanf("%s", &rematchVar);

	compare = (int)rematchVar;

	for (int i = 0; i < 2; i++) {
		if (compare == yes[i]) {
			printf("Restarting...\n");
			system("cls");
			return true;
		}
		if (compare == no[i]) {
			system("cls");
			return false;
		}
	}
	printf("Wrong input, please try again\n");
	rematch();
}

bool xOR(int x, int y, int n) {
	if (x == y == n) {
		return false;
	}
	if (x == n || y == n) {
		return true;
	}
	return false;
}
